{"version":3,"sources":["Components/Preview.js","Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Preview","react_default","a","createElement","Link","to","this","props","previousDays","map","day","status","date","msg","Component","Form","_this$props","handleDate","handleStatus","handleMsg","onSubmit","htmlFor","type","placeholder","value","onChange","name","onClick","className","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentDay","bind","assertThisInitialized","JSON","parse","window","localStorage","getItem","setState","event","objectSpread","target","preventDefault","concat","setItem","stringify","_this2","Switch","Route","exact","path","render","Components_Preview","Components_Form","Boolean","location","hostname","match","ReactDOM","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5757b16.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Preview extends Component {\r\n    render() {\r\n        return (\r\n            <section>\r\n                <Link to='/form'>/<button> + </button> </Link>\r\n                <ul>\r\n                    {this.props.previousDays.map((day) => <li> {day.status} {day.date} {day.msg}\r\n                    </li>)}\r\n                </ul>\r\n\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Preview;\r\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Form extends Component {\r\n    render() {\r\n        const {\r\n            handleDate,\r\n            handleStatus,\r\n            handleMsg,\r\n            date,\r\n            msg,\r\n            onSubmit\r\n        } = this.props\r\n        return (\r\n            <section>\r\n                <form>\r\n                    <label htmlFor=\"fecha\"> Fecha </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"dd/mm/aa\"\r\n                        value={date}\r\n                        onChange={handleDate} />\r\n                    <label htmlFor=\":)\"> :) </label>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"animo\"\r\n                        value=\":)\"\r\n                        onChange={handleStatus}\r\n                    />\r\n                    <label htmlFor=\":(\"> :( </label>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"animo\"\r\n                        value=\":(\"\r\n                        onChange={handleStatus}\r\n                    />\r\n                    <label htmlFor=\"mensaje\"> Mensaje </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"¿Cómo fue el día?\"\r\n                        value={msg}\r\n                        onChange={handleMsg}\r\n                    />\r\n                    <button onClick={onSubmit}> Guardar </button>\r\n                    <Link className=\"backToHome\" to={'/'}> <div> Volver </div> </Link>\r\n                </form>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Preview from './Components/Preview';\r\nimport Form from './Components/Form';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentDay: {\r\n        date: '',\r\n        status: '',\r\n        msg: ''\r\n      },\r\n      previousDays: []\r\n    };\r\n    this.handleStatus = this.handleStatus.bind(this);\r\n    this.handleDate = this.handleDate.bind(this);\r\n    this.handleMsg = this.handleMsg.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const previousDays = JSON.parse(window.localStorage.getItem('data'));\r\n    if (previousDays) {\r\n      this.setState({\r\n        previousDays\r\n      })\r\n    }\r\n  }\r\n\r\n  handleStatus(event) {\r\n    this.setState({\r\n      currentDay: {\r\n        ...this.state.currentDay,\r\n        status: event.target.value\r\n      }\r\n    })\r\n  }\r\n\r\n  handleDate(event) {\r\n    this.setState({\r\n      currentDay: {\r\n        ...this.state.currentDay,\r\n        date: event.target.value\r\n      }\r\n    })\r\n  }\r\n\r\n  handleMsg(event) {\r\n    this.setState({\r\n      currentDay: {\r\n        ...this.state.currentDay,\r\n        msg: event.target.value\r\n      }\r\n    })\r\n  }\r\n\r\n  onSubmit(event) {\r\n    event.preventDefault()\r\n    const previousDays = this.state.previousDays.concat(this.state.currentDay);\r\n    this.setState({\r\n      currentDay: {\r\n        date: '',\r\n        status: '',\r\n        msg: ''\r\n      },\r\n      previousDays\r\n    })\r\n    window.localStorage.setItem('data', JSON.stringify(previousDays))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"App\">\r\n        <Switch>\r\n          <Route\r\n            exact path='/'\r\n            render={() =>\r\n              <Preview\r\n                date={this.state.currentDay.date}\r\n                status={this.state.currentDay.status}\r\n                msg={this.state.currentDay.msg}\r\n                previousDays={this.state.previousDays} />} />\r\n\r\n          <Route\r\n            path='/form'\r\n            render={() =>\r\n              <Form\r\n                date={this.state.currentDay.date}\r\n                msg={this.state.currentDay.msg}\r\n                handleDate={this.handleDate}\r\n                handleStatus={this.handleStatus}\r\n                handleMsg={this.handleMsg}\r\n                onSubmit={this.onSubmit}\r\n              />} />\r\n        </Switch>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(<HashRouter>\r\n    <App />\r\n</HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}